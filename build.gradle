import org.jetbrains.changelog.Changelog

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'org.jetbrains.intellij' version '1.17.1'
    id 'org.jetbrains.changelog' version '2.2.0'
    id "org.jetbrains.grammarkit" version "2022.3.2.2"
}

Properties versionProps = new Properties()
try (final InputStream stream = new FileInputStream(file('version.properties'))) {
    versionProps.load(stream);
}

group = pluginGroup
version = versionProps['pluginVersion']
sourceCompatibility = pluginJavaVersion
targetCompatibility = pluginJavaVersion

// Configure project's dependencies
repositories {
    mavenCentral()
}

apply plugin: 'idea'
idea {
    module {
        generatedSourceDirs += file('src/main/gen')
    }
}

// Configure gradle-intellij-plugin plugin.
// Read more: https://github.com/JetBrains/gradle-intellij-plugin
apply plugin: 'org.jetbrains.intellij'
intellij {
    pluginName = pluginId

    type = platformType
    version = platformVersion
    downloadSources = platformDownloadSources.toBoolean()
    updateSinceUntilBuild = true

    // Plugin Dependencies. Uses `platformPlugins` property from the gradle.properties file.
    plugins = platformPlugins.split(',').collect { it.trim() as String }
}

apply plugin: 'org.jetbrains.changelog'

apply plugin: 'org.jetbrains.grammarkit'
generateLexer {
    sourceFile = file("src/main/resources/org/kdb/inside/brains/q.flex")
    targetOutputDir = file("src/main/gen/org/kdb/inside/brains")
    targetClass = "QLexer"
    purgeOldFiles = true
    dependsOn("sourcesJar")
}

generateParser {
    sourceFile = file("src/main/resources/org/kdb/inside/brains/q.bnf")
    targetRootOutputDir = file('src/main/gen')
    pathToParser = 'org/kdb/inside/brains/parser/QParser.java'
    pathToPsiRoot = 'org/kdb/inside/brains/psi'
    purgeOldFiles = true
    dependsOn("sourcesJar")
}

dependencies {
    implementation 'org.jfree:jfreechart:1.5.4'
    implementation 'org.jfree:org.jfree.svg:5.0.5'

    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'

    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
}

sourceSets {
    main {
        java.srcDirs 'src/main/gen', 'src/main/java'
    }
}

test {
    useJUnitPlatform()
}

tasks.register('generateCode') {
    dependsOn generateLexer
    dependsOn generateParser
}

compileJava {
    dependsOn generateCode
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

patchPluginXml {
    sinceBuild = pluginSinceBuild
    untilBuild = pluginUntilBuild
    changeNotes = provider {
        changelog.renderItem(changelog.get(project.version).withHeader(false).withEmptySections(false), Changelog.OutputType.HTML)
    }
}

runPluginVerifier {
    ideVersions = pluginVerifierVersions.split(',').collect { it.trim() as String }
}

publishPlugin {
    token = System.getenv("KDBINSIDEBRAINS_RELEASE_PLUGIN_TOKEN")
}

// Release to Maven Central: https://docs.gradle.org/current/userguide/publishing_maven.html
java {
    withJavadocJar()
    withSourcesJar()
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

javadoc {
    options.addBooleanOption('Xdoclint:none', true)
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'plugin'

            from components.java

            pom {
                name = 'KdbInsideBrains'
                description = "Open-Source IntelliJ-based IDEA plugin for <a href=\"https://kx.com/\">kdb+</a> time-series realtime database."
                url = 'https://www.kdbinsidebrains.dev'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kdbinsidebrains'
                        name = 'Support KdbInsideBrains'
                        email = 'support@kdbinsidebrains.dev'
                    }
                }
                scm {
                    url = 'https://github.com/kdbinsidebrains/plugin'
                    connection = 'scm:git:git://github.com/kdbinsidebrains/plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:kdbinsidebrains/plugin.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}